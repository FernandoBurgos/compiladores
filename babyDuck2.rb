#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "babyDuck2.y".
#

require 'racc/parser.rb'


class SemanticError < StandardError; end

class BabyDuck < Racc::Parser

module_eval(<<'...end babyDuck2.y/module_eval...', 'babyDuck2.y', 344)
def parse(str)
  # Initialize semantic analysis variables
  @symbol_tables = {}
  @current_scope = nil
  @current_function = nil
  @current_vars = []
  @current_position = 0
  @var_type = nil
  @calling_function = nil
  @current_param_count = 0
  @cuadruples = []

  @semantic_Cube = {
    'int' => {
      'int' => 'int',
      'float' => 'float',
      'string' => 'error'
    },
    'float' => {
      'int' => 'float',
      'float' => 'float',
      'string' => 'error'
    },
    'string' => {
      'int' => 'error',
      'float' => 'error',
      'string' => 'string'
    },
    'bool' => {
      'int' => 'error',
      'float' => 'error',
      'string' => 'error'
    }
  }

  @q = []
  until str.empty?
    case str
    when /\A\s+/
      # Ignora los espacios en blanco
    when /\A(program|main|end|var|void|if|else|while|do|print|int|float)\b/
      # Palabras clave reservadas - devuelve el token como su propio nombre
      @q.push [$&, $&]
    when /\A[a-zA-Z][a-zA-Z0-9_]*/
      # Identificador
      @q.push [:ID, $&]
    when /\A[0-9]+\.[0-9]+/
      # Constante flotante
      @q.push [:CTE_FLOAT, $&.to_f]
    when /\A[0-9]+/
      # Constante entera
      @q.push [:CTE_INT, $&.to_i]
    when /\A\"[^\"]*\"/
      # Constante string (incluyendo las comillas)
      @q.push [:CTE_STRING, $&[1...-1]] # Eliminamos las comillas
    when /\A(==|!=|<=|>=|<|>)/o
      #operadores de comparación
      @q.push [$&, $&]
    when /\A.|\n/o
      # Cualquier otro carácter (operadores, paréntesis, etc.)
      s = $&
      @q.push [s, s]
    end
    str = $'
  end
  @q.push [false, '$end']
  do_parse
end

def next_token
  @q.shift
end

# Helper function to check if a variable exists in current scope or global scope
def variable_exists(var_name)
  # Check current scope first
  return true if @symbol_tables[@current_scope] && @symbol_tables[@current_scope][var_name]
  
  # Check global scope if we're not already in it
  return true if @current_scope != 'global' && @symbol_tables['global'][var_name]
  
  # Variable not found
  false
end

# Helper function to create cuadruples
def create_cuadruple(op, arg1, arg2, result)
  newCuadruple = { op: op, arg1: arg1, arg2: arg2, result: result }
  @cuadruples << newCuadruple
  puts "Cuadruple #{@cuadruples.length}: #{op} #{arg1} #{arg2} -> #{result}"
end

# Helper function to get variable data
def get_variable_data(var_name)
  # Check current scope first
  if @symbol_tables[@current_scope] && @symbol_tables[@current_scope][var_name]
    return @symbol_tables[@current_scope][var_name]
  end
  
  # Check global scope if we're not already in it
  if @current_scope != 'global' && @symbol_tables['global'][var_name]
    return @symbol_tables['global'][var_name]
  end
  
  # Variable not found
  nil
end

def set_variable_value(var_name, value)
  # Check current scope first
  if @symbol_tables[@current_scope] && @symbol_tables[@current_scope][var_name]
    @symbol_tables[@current_scope][var_name][:value] = value
  end
  
  # Check global scope if we're not already in it
  if @current_scope != 'global' && @symbol_tables['global'][var_name]
    @symbol_tables['global'][var_name][:value] = value
  end
  
  # Variable not found
  nil
end

# Helper to print the symbol table (for debugging)
def print_symbol_tables
  puts "\n==== SYMBOL TABLES ===="
  @symbol_tables.each do |scope, vars|
    puts "SCOPE: #{scope}"
    vars.each do |var_name, details|
      puts "  #{var_name}: #{details}"
    end
    puts ""
  end
  puts "======================="
end

# Helper to print the cuadruples (for debugging)
def print_cuadruples
  puts "\n==== CUADRUPLES ===="
  @cuadruples.each_with_index do |cuadruple, index|
    puts "Cuadruple #{index + 1}: #{cuadruple[:op]} #{cuadruple[:arg1]} #{cuadruple[:arg2]} -> #{cuadruple[:result]}"
  end
  puts "======================="
end

# Helper to evaluate expressions
def evaluate_expression_types(type1, type2)
  if @semantic_Cube[type1] && @semantic_Cube[type1][type2]
    return @semantic_Cube[type1][type2]
  end
  return 'error'
end

def evaluate_operation(left, op, right)
  puts "DEBUG: Evaluating operation: #{left} #{op} #{right}"
  case op
  when '+'
    return left + right
  when '-'
    return left - right
  when '*'
    return left * right
  when '/'
    return left / right
  when '>'
    return left > right ? 1 : 0
  when '<'
    return left < right ? 1 : 0
  when '!='
    return left != right ? 1 : 0
  end
end

...end babyDuck2.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    71,    72,    71,    72,    50,    50,    71,    72,    92,    93,
    94,    30,    31,    30,    31,    74,   103,    74,    71,    72,
     3,    74,   -69,    51,    51,    52,    52,    54,    54,     4,
    88,     5,    88,   105,   106,    71,    72,    71,    72,    71,
    72,    71,    72,    71,    72,    71,    72,    71,    72,     6,
    74,   -69,    74,     7,    74,    11,    74,    15,    74,    18,
    74,    19,    74,    71,    72,    99,   100,    20,    21,    22,
    23,    28,    34,    35,    37,    38,    39,    18,    74,    41,
    55,    28,    59,    61,    62,    63,    64,    65,    11,    18,
    34,    90,   107,   108,   109,   111,   112,   113,   114,   118,
    34,   120,   121,   122,   124,   126,    34,   129,    34,   131,
    15 ]

racc_action_check = [
    65,    65,   113,   113,    34,    44,    64,    64,    69,    69,
    69,    22,    22,    38,    38,    65,    76,   113,    70,    70,
     0,    64,    64,    34,    44,    34,    44,    34,    44,     1,
    65,     3,   113,    76,    76,    83,    83,    61,    61,    62,
    62,    63,    63,    74,    74,    91,    91,    96,    96,     4,
    83,    83,    61,     5,    62,     8,    63,     9,    74,    11,
    91,    12,    96,    98,    98,    73,    73,    14,    15,    17,
    18,    20,    24,    25,    27,    28,    29,    32,    98,    33,
    35,    37,    42,    50,    51,    52,    53,    54,    55,    58,
    66,    68,    78,    79,    80,    84,    85,    86,    89,   101,
   107,   108,   109,   112,   114,   119,   120,   125,   126,   127,
   128 ]

racc_action_pointer = [
    11,    29,   nil,    21,    49,    42,   nil,   nil,    41,    34,
   nil,    49,    49,   nil,    48,    58,   nil,    54,    54,   nil,
    61,   nil,    -6,   nil,    48,    53,   nil,    58,    60,    65,
   nil,   nil,    67,    66,    -6,    59,   nil,    71,    -4,   nil,
   nil,   nil,    57,   nil,    -5,   nil,   nil,   nil,   nil,   nil,
    57,    65,    66,    67,    68,    74,   nil,   nil,    79,   nil,
   nil,    33,    35,    37,     2,    -4,    66,   nil,    80,     2,
    14,   nil,   nil,    63,    39,   nil,     6,   nil,    72,    73,
    74,   nil,   nil,    31,    79,    76,    81,   nil,   nil,    76,
   nil,    41,   nil,   nil,   nil,   nil,    43,   nil,    59,   nil,
   nil,    79,   nil,   nil,   nil,   nil,   nil,    76,    69,    91,
   nil,   nil,    92,    -2,    93,   nil,   nil,   nil,   nil,    75,
    82,   nil,   nil,   nil,   nil,    96,    84,    98,    87,   nil,
   nil,   nil,   nil ]

racc_action_default = [
   -79,   -79,    -1,   -79,   -79,   -79,   133,    -2,    -6,   -17,
    -5,   -10,   -79,   -16,   -79,   -79,    -7,   -79,   -11,    -3,
   -22,   -20,   -79,   -12,   -79,   -79,   -21,   -26,   -79,   -79,
   -14,   -15,   -79,   -79,   -29,   -79,   -23,   -79,   -79,    -8,
   -13,    -4,   -79,   -28,   -29,   -32,   -33,   -34,   -35,   -36,
   -67,   -79,   -79,   -79,   -79,    -6,   -25,   -24,   -10,   -27,
   -31,   -57,   -57,   -57,   -57,   -57,   -79,    -9,   -79,   -38,
   -45,   -46,   -47,   -50,   -57,   -54,   -79,   -56,   -79,   -79,
   -79,   -68,   -70,   -57,   -72,   -79,   -75,   -77,   -78,   -79,
   -37,   -57,   -40,   -41,   -42,   -43,   -57,   -48,   -57,   -51,
   -52,   -79,   -55,   -58,   -59,   -60,   -61,   -79,   -79,   -79,
   -71,   -73,   -79,   -57,   -79,   -39,   -44,   -49,   -53,   -64,
   -79,   -66,   -74,   -76,   -18,   -79,   -79,   -79,   -17,   -62,
   -63,   -65,   -19 ]

racc_goto_table = [
    12,    33,    68,    78,    79,    85,    87,    80,     9,    16,
    26,    42,    29,   115,     1,   101,     2,     8,   116,    24,
    40,    60,    58,    32,    25,   128,   110,    56,    57,    36,
    91,   117,    95,    96,    97,    98,   102,   104,   125,   nil,
   nil,   nil,   nil,    89,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   123,    87,    66,    67,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   119,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,   nil,
   nil,   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132 ]

racc_goto_check = [
     4,     5,    29,    29,    29,    48,    29,    44,     3,     9,
    18,    21,    11,    30,     1,    29,     2,     6,    30,     7,
    10,    21,    12,    13,    16,    17,    44,    18,    11,    20,
    31,    32,    33,    34,    36,    37,    40,    41,    42,   nil,
   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,    29,     3,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    14,    16,     0,    -9,   -23,    10,     0,   nil,    -2,
   -12,   -10,   -17,     0,   nil,   nil,     4,   -99,   -10,   nil,
     2,   -23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -59,
   -78,   -39,   -67,   -38,   -37,   nil,   -39,   -38,   nil,   nil,
   -40,   -39,   -81,   nil,   -57,   nil,   nil,   nil,   -60,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
    17,   nil,   nil,   nil,    13,    14,   nil,   nil,   nil,    27,
   nil,   nil,    43,    44,    45,    46,    47,    48,    49,    84,
    69,   nil,    70,   nil,    77,    73,   nil,   nil,    75,    76,
   nil,   nil,   nil,    53,   nil,    81,    82,    83,   nil,    86 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  0, 41, :_reduce_2,
  0, 42, :_reduce_3,
  10, 37, :_reduce_4,
  1, 38, :_reduce_none,
  0, 38, :_reduce_none,
  2, 43, :_reduce_none,
  0, 47, :_reduce_8,
  6, 44, :_reduce_none,
  0, 44, :_reduce_none,
  1, 45, :_reduce_11,
  0, 48, :_reduce_12,
  4, 45, :_reduce_13,
  1, 46, :_reduce_14,
  1, 46, :_reduce_15,
  1, 39, :_reduce_none,
  0, 39, :_reduce_none,
  0, 52, :_reduce_18,
  11, 49, :_reduce_none,
  2, 50, :_reduce_20,
  1, 51, :_reduce_none,
  0, 51, :_reduce_none,
  2, 53, :_reduce_none,
  3, 54, :_reduce_24,
  2, 55, :_reduce_none,
  0, 55, :_reduce_none,
  3, 40, :_reduce_none,
  1, 56, :_reduce_none,
  0, 56, :_reduce_none,
  1, 57, :_reduce_none,
  2, 57, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  4, 59, :_reduce_37,
  1, 64, :_reduce_38,
  3, 64, :_reduce_39,
  1, 66, :_reduce_40,
  1, 66, :_reduce_41,
  1, 66, :_reduce_42,
  2, 65, :_reduce_43,
  2, 68, :_reduce_44,
  0, 68, :_reduce_45,
  1, 69, :_reduce_46,
  1, 69, :_reduce_47,
  2, 67, :_reduce_48,
  2, 71, :_reduce_49,
  0, 71, :_reduce_50,
  1, 72, :_reduce_51,
  1, 72, :_reduce_52,
  3, 70, :_reduce_53,
  1, 70, :_reduce_54,
  2, 73, :_reduce_55,
  1, 74, :_reduce_56,
  0, 74, :_reduce_57,
  1, 75, :_reduce_58,
  1, 75, :_reduce_59,
  1, 76, :_reduce_60,
  1, 76, :_reduce_61,
  7, 60, :_reduce_none,
  2, 77, :_reduce_none,
  0, 77, :_reduce_none,
  7, 61, :_reduce_none,
  5, 62, :_reduce_66,
  1, 78, :_reduce_67,
  1, 79, :_reduce_none,
  0, 79, :_reduce_none,
  1, 80, :_reduce_none,
  2, 80, :_reduce_none,
  1, 81, :_reduce_72,
  2, 82, :_reduce_73,
  5, 63, :_reduce_74,
  1, 83, :_reduce_75,
  3, 83, :_reduce_76,
  1, 84, :_reduce_77,
  1, 84, :_reduce_78 ]

racc_reduce_n = 79

racc_shift_n = 133

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "/" => 3,
  "+" => 4,
  "-" => 5,
  ">" => 6,
  "<" => 7,
  "!=" => 8,
  "program" => 9,
  :ID => 10,
  ";" => 11,
  "main" => 12,
  "end" => 13,
  "var" => 14,
  ":" => 15,
  "," => 16,
  "int" => 17,
  "float" => 18,
  "(" => 19,
  ")" => 20,
  "[" => 21,
  "]" => 22,
  "void" => 23,
  "{" => 24,
  "}" => 25,
  "=" => 26,
  :CTE_INT => 27,
  :CTE_FLOAT => 28,
  "if" => 29,
  "else" => 30,
  "while" => 31,
  "do" => 32,
  "print" => 33,
  :CTE_STRING => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\"<\"",
  "\"!=\"",
  "\"program\"",
  "ID",
  "\";\"",
  "\"main\"",
  "\"end\"",
  "\"var\"",
  "\":\"",
  "\",\"",
  "\"int\"",
  "\"float\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"void\"",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "CTE_INT",
  "CTE_FLOAT",
  "\"if\"",
  "\"else\"",
  "\"while\"",
  "\"do\"",
  "\"print\"",
  "CTE_STRING",
  "$start",
  "target",
  "program",
  "vars",
  "funcs",
  "body",
  "@1",
  "@2",
  "varsdec",
  "varlist",
  "varsids",
  "type",
  "@3",
  "@4",
  "funcsdec",
  "func_header",
  "funcvars",
  "@5",
  "funcvarsdec",
  "param_declaration",
  "funcvarsdeclist",
  "statement",
  "statedec",
  "statevalues",
  "assign",
  "condition",
  "cycle",
  "fcall",
  "printstat",
  "expression",
  "exp",
  "operator",
  "term",
  "termlist",
  "termop",
  "factor",
  "factorlist",
  "factorop",
  "factorids",
  "expop",
  "expids",
  "const",
  "optionalelse",
  "function_id",
  "funccallexp",
  "funcexplist",
  "single_param",
  "single_param_comma",
  "printexplist",
  "printvalue" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 14)
  def _reduce_2(val, _values, result)
          # Initialize the symbol tables
      @current_scope = 'global'
      @symbol_tables = { 'global' => {} }
      @current_function = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 20)
  def _reduce_3(val, _values, result)
          @current_scope = 'main'
      @symbol_tables['main'] = {}

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 24)
  def _reduce_4(val, _values, result)
          puts "Codigo compilado correctamente"
      result = val[1]

    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 32)
  def _reduce_8(val, _values, result)
          # Add all variables of this type to the current scope
      puts "Received type: #{@var_type}"
      @current_vars.each do |var_name|
        if @symbol_tables[@current_scope][var_name]
          raise SemanticError, "Variable decalration: Variable '#{var_name}' already declared in scope '#{@current_scope}'"
        else
          @symbol_tables[@current_scope][var_name] = {type: @var_type, value: nil}
          puts "Added variable '#{var_name}' of type '#{@var_type}' to scope '#{@current_scope}'"
        end
      end

    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 45)
  def _reduce_11(val, _values, result)
          @current_vars = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 48)
  def _reduce_12(val, _values, result)
          @current_vars = [val[0]]

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 51)
  def _reduce_13(val, _values, result)
          @current_vars.unshift(val[0])

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 54)
  def _reduce_14(val, _values, result)
        @var_type = 'int'
    result = 'int'

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 58)
  def _reduce_15(val, _values, result)
        @var_type = 'float'
    result = 'float'

    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 65)
  def _reduce_18(val, _values, result)
        # Return to global scope after function definition
    @current_scope = 'global'
    @current_function = nil

    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 72)
  def _reduce_20(val, _values, result)
        # Store function name
    @current_function = val[1]
    @current_scope = val[1]
    @symbol_tables[@current_scope] = {}
    puts "Created new function scope: #{@current_scope}"
    
    # Return the function name for potential use in parent rule
    result = val[1]

    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 86)
  def _reduce_24(val, _values, result)
        var_name = val[0]
    
    if @symbol_tables[@current_scope][var_name]
      raise SemanticError, "Parameter declaration: Parameter '#{var_name}' already declared in function '#{@current_scope}'"
    else
      @symbol_tables[@current_scope][var_name] = {type: val[2], is_param: 1, position: @current_param_count, offset: "BP+#{@current_param_count+2}"}
      @current_param_count += 1
      puts "Added parameter '#{var_name}' of type '#{val[2]}' to function '#{@current_scope}'"
    end
    
    # Return the parameter name for potential use in parent rule
    result = var_name

    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 112)
  def _reduce_37(val, _values, result)
          puts "Assigned value: #{val[2]} to variable: #{val[0]}"
      # Check if variable exists in current scope or global scope
      var_name = val[0]
      if !variable_exists(var_name)
        raise SemanticError, "Assignment: Variable '#{var_name}' not declared before use"
      end
      resultingType = val[2][:type]
      # Check if the types are compatible
      if evaluate_expression_types(get_variable_data(var_name)[:type], resultingType) == 'error'
        raise SemanticError, "Assignment: Type mismatch in assignment to variable '#{var_name}'"
      end
      # Set the variable value
      set_variable_value(var_name, val[2][:value])

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 129)
  def _reduce_38(val, _values, result)
        result = val[0]  # Pass up the exp value

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 132)
  def _reduce_39(val, _values, result)
        left = val[0]
    op = val[1]
    right = val[2]
    evaluation = evaluate_operation(left[:value], op, right[:value])
    puts "DEBUG: Expression with operator: #{left[:value]} #{op} #{right[:value]}: #{evaluation}"

    # Here you might evaluate the expression or build a node
    result = { name: 'Evalresult', type: 'bool', value: evaluation }

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 142)
  def _reduce_40(val, _values, result)
     result = '>'
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 143)
  def _reduce_41(val, _values, result)
     result = '<'
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 144)
  def _reduce_42(val, _values, result)
     result = '!='
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 147)
  def _reduce_43(val, _values, result)
        if val[1].nil? || val[1].empty?  # No operations in termlist
      result = val[0]  # Just pass up the term value
    else
      # Handle operations from termlist
      term = val[0]
      ops = val[1]
      puts "DEBUG: Exp with termlist: #{term} #{ops}"
      isTermParam = variable_exists(term[:name]) ? get_variable_data(term[:name])[:is_param] : 0
      isOpsParam = variable_exists(ops[:name]) ? get_variable_data(ops[:name])[:is_param] : 0
      
      resultingType = evaluate_expression_types(term[:type], ops[:type])
        # Check if the types are compatible
        if resultingType == 'error'
          raise SemanticError, "Assignment: Type mismatch in assignment to variable '#{var_name}'"
        end
      # Evaluate the operation
      if isTermParam == 1 or isOpsParam == 1
        # If one of the operands is a parameter, we need to use its offset
        term_value =  isTermParam == 0 ? term[:value] : get_variable_data(term[:name])[:offset]
        ops_value = isOpsParam == 0 ? ops[:value] : get_variable_data(ops[:name])[:offset]
        create_cuadruple(ops[:operator], term_value, ops_value, 'result')
      else
        evaluation = evaluate_operation(term[:value], ops[:operator], ops[:value])
      end

      result = { name: 'Evalresult', type: resultingType, value: evaluation }
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 177)
  def _reduce_44(val, _values, result)
        result = { operator: val[0], name: val[1][:name], type: val[1][:type], value: val[1][:value] }

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 180)
  def _reduce_45(val, _values, result)
        result = nil  # No operations

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 183)
  def _reduce_46(val, _values, result)
     result = '+'
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 184)
  def _reduce_47(val, _values, result)
     result = '-'
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 187)
  def _reduce_48(val, _values, result)
        if val[1].nil? || val[1].empty?  # No operations in factorlist
      result = val[0]  # Just pass up the factor value
    else
      # Handle operations from factorlist
      factor = val[0]
      ops = val[1]
      puts "DEBUG: Term with factorlist: #{factor} #{ops}"
      isFactorParam = variable_exists(factor[:name]) ? get_variable_data(factor[:name])[:is_param] : 0
      isOpsParam = variable_exists(ops[:name]) ? get_variable_data(ops[:name])[:is_param] : 0

      resultingType = evaluate_expression_types(factor[:type], ops[:type])
        # Check if the types are compatible
        if resultingType == 'error'
          raise SemanticError, "Assignment: Type mismatch in assignment to variable '#{var_name}'"
        end

      # Evaluate the operation
      if isFactorParam == 1 or isOpsParam == 1
        # If one of the operands is a parameter, we need to use its offset
        factor_value =  isFactorParam == 0 ? factor[:value] : get_variable_data(factor[:name])[:offset]
        ops_value = isOpsParam == 0 ? ops[:value] : get_variable_data(ops[:name])[:offset]
        create_cuadruple(ops[:operator], factor_value, ops_value, 'result')
      else
        evaluation = evaluate_operation(factor[:value], ops[:operator], ops[:value])
      end

      result = { name: 'Evalresult', type: resultingType, value: evaluation }
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 218)
  def _reduce_49(val, _values, result)
        result = { operator: val[0], name: val[1][:name], type: val[1][:type], value: val[1][:value] }

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 221)
  def _reduce_50(val, _values, result)
        result = nil  # No operations

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 224)
  def _reduce_51(val, _values, result)
     result = '*'
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 225)
  def _reduce_52(val, _values, result)
     result = '/'
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 228)
  def _reduce_53(val, _values, result)
        result = val[1]  # Return the expression inside parentheses

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 231)
  def _reduce_54(val, _values, result)
        result = val[0]  # Pass up the factorids value

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 235)
  def _reduce_55(val, _values, result)
        if val[0].nil? || val[0].empty?  # No operator
      result = val[1]  # Just pass up the expids value
    else
      # Apply unary operator
      op = val[0]
      value = val[1]
      puts "DEBUG: Factorids with expop: #{op} #{value}"
      result = { operator: op, value: value }
    end

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 247)
  def _reduce_56(val, _values, result)
        result = val[0]  # Pass up the termop value

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 250)
  def _reduce_57(val, _values, result)
        result = nil  # No operator

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 254)
  def _reduce_58(val, _values, result)
        # Check if variable exists when used in expression
    var_name = val[0]
    if !variable_exists(var_name)
      raise SemanticError, "Expression: Variable '#{var_name}' not declared before use"
    end
    var_type = get_variable_data(var_name)[:type]
    var_value = get_variable_data(var_name)[:value]
    result = { name: var_name, type: var_type, value: var_value }

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 264)
  def _reduce_59(val, _values, result)
        result = val[0]  # Pass up the const value

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 268)
  def _reduce_60(val, _values, result)
        result = {name: 'int const', value: val[0], type: 'int' }

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 271)
  def _reduce_61(val, _values, result)
        result = { name: 'float const', value: val[0], type: 'float' }

    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 283)
  def _reduce_66(val, _values, result)
        # Reset function calling state
    @calling_function = nil
    result = val[0]  # Return the function ID from function_id rule

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 289)
  def _reduce_67(val, _values, result)
        func_name = val[0]
    
    # Check if function exists
    if !@symbol_tables[func_name]
      raise SemanticError, "Function call: Function '#{func_name}' not declared before use"
    end
    
    # Set up function call state
    @current_param_count = 0
    @calling_function = func_name
    
    # Return the function name for use in parent rule
    result = func_name

    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'babyDuck2.y', 308)
  def _reduce_72(val, _values, result)
        @current_param_count += 1
    result = val[0]  # Return the expression value

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 313)
  def _reduce_73(val, _values, result)
        @current_param_count += 1
    result = val[0]  # Return the expression value

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 318)
  def _reduce_74(val, _values, result)
     result = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 320)
  def _reduce_75(val, _values, result)
        result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 323)
  def _reduce_76(val, _values, result)
        result = val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 326)
  def _reduce_77(val, _values, result)
        puts "printed #{val[0][:value]}"
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'babyDuck2.y', 330)
  def _reduce_78(val, _values, result)
        puts "printed #{val[0]}"
    result = {name: 'string const', value: val[0], type: 'string'}

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class BabyDuck


if $0 == __FILE__
  parser = BabyDuck.new
  # Código para probar tu parser

  if ARGV[0]
    input = File.read(ARGV[0])
    begin
      result = parser.parse(input)
      # Print symbol tables for debugging
      parser.print_symbol_tables
      parser.print_cuadruples
      puts "Análisis exitoso: #{result}"
    rescue SemanticError => e
      puts "Error: #{e.message}"
    end
  end
end
